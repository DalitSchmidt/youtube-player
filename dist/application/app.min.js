(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
            }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
})({ 1: [function (require, module, exports) {
        var app = angular.module('Youtube', ['ngRoute']);
        // app.config( $routeProvider  =>
        //     $routeProvider
        //     .when('/home', {})
        //     .when('/wishlist', {})
        //     .otherwise({
        //         redirectTo: '/home'
        //     }))

        app.run(['$localStorageWishList', function ($localStorageWishList) {
            $localStorageWishList.fetchList();
        }]);

        app.constant('LS_CELL_NAME', 'youtube-wishlist');
        app.factory('$localStorageWishList', ['$window', 'LS_CELL_NAME', function ($window, LS_CELL_NAME) {
            let storage = $window.localStorage;
            let wishlist = [];

            function save() {
                storage.setItem(LS_CELL_NAME, angular.toJson(wishlist));
            }

            function findInList(code) {
                // I could use underscore.js or lodash.js but I didn't want to add all the lib
                // only for this dummy search
                for (let i = 0; i < wishlist.length; i++) {
                    if (wishlist[i].code === code) {
                        return i;
                    }
                }

                return false;
            }

            return {
                /**
                 * Fetches the list from the storage
                 * If no list has been found it will create one
                 */
                fetchList: function () {
                    let list = storage.getItem(LS_CELL_NAME);
                    wishlist = list === null ? [] : angular.fromJson(list);
                },

                getList: function () {
                    return wishlist;
                },

                /**
                 * Adds item to the list
                 * @param item
                 */
                addItem: function (item) {
                    wishlist.push(item);
                    save();
                },

                /**
                 * Check if item exists on list, return the index
                 * false if not
                 * @param code
                 * @returns {boolean|number}
                 */
                hasItem: function (code) {
                    return findInList(code);
                },

                /**
                 * Removes items from the list
                 * @param item
                 */
                removeItem: function (item) {
                    let index = findInList(item);
                    wishlist.splice(index, 1);
                    save();
                }
            };
        }]);
        app.controller('MainController', ['$scope', 'YoutubeAPI', '$youtube', '$localStorageWishList', ($scope, YoutubeAPI, $youtube, $localStorageWishList) => {
            // Will hold the results
            $scope.results = [];
            $scope.videos = [];
            $scope.wishlist = $localStorageWishList.getList();

            $scope.searchTerm = 'daft';

            $scope.currentVideo = null;

            $scope.setVideo = function (video) {
                $scope.currentVideo = video;
            };

            $scope.$watch('searchTerm', function (newVal, oldVal) {
                if (typeof newVal === 'undefined') return;

                YoutubeAPI.searchVideos(newVal).then(results => {
                    $scope.videos = results;
                });
            });

            $scope.isSaved = function (item) {
                return $localStorageWishList.hasItem(item);
            };

            // Wait till document is ready to remove loader
            // angular.element(document).ready(() => $scope.ready = true)
            // $scope.$watch('ready', ( newValue, oldValue ) => angular.element( document.getElementById('main') ).removeClass('loading'))
        }]);
        app.controller('MenuController', ['$scope', 'YoutubeAPI', '$youtube', '$localStorageWishList', ($scope, YoutubeAPI, $youtube, $localStorageWishList) => {
            $scope.list = 'search';

            $scope.changeList = function (list) {
                $scope.list = list;
            };

            $scope.$watch('list', function (newVal, oldVal) {
                if (newVal === oldVal) return;

                // if ( new )
            });
        }]);
        app.directive('result', [function () {
            return {
                restrict: 'C',
                link: function (scope, element) {
                    element.on('mouseenter', function (e) {
                        let audio = document.getElementsByTagName("audio")[0];
                        audio.play();
                    });
                }
            };
        }]);
        /**
         * This directive is for the 'heart' icon, to add item to the wishlist
         */

        app.directive('wishlist', ['$localStorageWishList', $localStorageWishList => {
            return {
                restrict: 'C',
                link: function (scope, element, attrs) {
                    element.on('click', e => {
                        let video = angular.fromJson(attrs.item);

                        if ($localStorageWishList.hasItem(video.code)) {
                            $localStorageWishList.removeItem(video);
                            element.removeClass('fa-heart').addClass('fa-heart-o');
                        } else {
                            $localStorageWishList.addItem(video);
                            element.removeClass('fa-heart-o').addClass('fa-heart');
                        }
                    });
                }
            };
        }]);
        app.factory('YoutubeAPI', ['$http', '$q', function ($http, $q) {
            let nextPageToken = '';
            let currentQuery = '';

            function setNextPage(token) {
                nextPageToken = token;
            }

            function arrangeVideos(results) {
                let videos = [];

                results.data.items.forEach((video, index) => {
                    videos.push({
                        code: video.id.videoId,
                        title: video.snippet.title,
                        description: video.snippet.description
                    });
                });

                return videos;
            }

            return {
                searchVideos: function (query, pageToken = '') {
                    let deferred = $q.defer();

                    $http.get('https://www.googleapis.com/youtube/v3/search', {
                        params: {
                            key: 'AIzaSyAaVxe2e6AbU3FD2pKTQh1_AySRHC1NY8I',
                            type: 'video',
                            maxResults: '10',
                            pageToken,
                            part: 'id,snippet',
                            fields: 'items/id,items/snippet/title,items/snippet/description,items/snippet/thumbnails/default,items/snippet/channelTitle,nextPageToken',
                            q: query
                        }
                    }).then(results => {
                        deferred.resolve(arrangeVideos(results));
                    });

                    return deferred.promise;
                }
            };
        }]);
        app.directive('player', ['$youtube', function ($youtube) {
            return {
                restrict: 'A',
                scope: {
                    videoId: '@'
                },
                link: function (scope) {
                    scope.$watch('videoId', function (videoId) {
                        if (videoId) $youtube.createPlayer(videoId);
                    });
                }
            };
        }]);
        app.service('$youtube', ['$log', function ($log) {
            let player = false;
            let videoId = false;

            return {
                initPlayer: function () {
                    if (player) {
                        player.loadVideoById(videoId);
                        return;
                    }

                    player = new YT.Player('player', {
                        videoId: videoId,
                        playerVars: {
                            'color': 'white',
                            'autoplay': 1,
                            'controls': 2,
                            'showinfo': 0,
                            'fs': 0,
                            'rel': 0
                        }
                    });
                },

                createPlayer: function (id) {
                    let self = this;

                    videoId = id;

                    // If the library isn't here at all,
                    if (typeof YT === 'undefined') {
                        // ...grab on to global callback, in case it's eventually loaded
                        $window.onYouTubeIframeAPIReady = self.initPlayer;
                        $log('Unable to find YouTube iframe library on this page.');
                    } else {
                        YT.ready(self.initPlayer);
                    }
                }
            };
        }]);
    }, {}] }, {}, [1]);

},{}]},{},[1]);

var app = angular.module('Youtube', ['ngRoute'])
app.run(['$localStorageWishList', function( $localStorageWishList ) {
    $localStorageWishList.fetchList()
}])

app.constant('LS_CELL_NAME', 'youtube-wishlist')
/**
 * Saving a local copy of the wishlist here in the factory
 * Every changes are being updated here in the factory and saved back to the local storage
 */

app.factory('$localStorageWishList', ['$window', 'LS_CELL_NAME', function( $window, LS_CELL_NAME ) {
    let storage = $window.localStorage
    let wishlist = []

    /**
     * Saves the wishlist back to the local storage
     */
    function save() {
        storage.setItem( LS_CELL_NAME, angular.toJson( wishlist ) )
    }

    /**
     * Finds an item (by code) in the wishlist
     * @param code
     * @returns {*}
     */
    function findInList( code ) {
        // I could use underscore.js or lodash.js but I didn't want to add all the lib
        // only for this dummy search
        for ( let i = 0; i < wishlist.length; i++ ) {
            if ( wishlist[ i ].code === code )
                return true
        }
        
        return false
    }

    return {
        /**
         * Fetches the list from the storage
         * If no list has been found it will create one
         */
        fetchList: function() {
            let list = storage.getItem( LS_CELL_NAME )
            wishlist = ( list === null ) ? [] : angular.fromJson( list )
        },

        getList: function() {
            return wishlist
        },

        /**
         * Adds item to the list
         * @param item
         */
        addItem: function( item ) {
            wishlist.push( item )
            // Use save each time we update something
            save()
        },

        /**
         * Check if item exists on list, return the index
         * false if not
         * @param code
         * @returns {boolean|number}
         */
        hasItem: function( code ) {
            return findInList( code )
        },

        /**
         * Removes items from the list
         * @param item
         */
        removeItem: function( item ) {
            let index = findInList( item )
            wishlist.splice(index, 1)
            // Use save each time we update something
            save()
        }
    }
}])
app.controller('MainController', ['$scope', 'YoutubeAPI', '$youtube', '$localStorageWishList', ( $scope, YoutubeAPI, $youtube, $localStorageWishList ) => {
    // .ready is holding the DOM ready event and .loading is when user searches something
    $scope.ready = $scope.loading = false

    /*
     * I've created 3 vars:
     * When user searches something it will put the results inside remoteVideos and results
     * When user click on "Wishlist" tab it will change the .result property to be the wishlist items
     * That's why the wishlist is saved EXACTLY like the way we repeat the videos in the controller
     */
    $scope.results = {
        remoteVideos: [],
        wishlist: [],
        results: [],
        list: 'remote'
    }

    // Just for fun :) put in comment if you want
    $scope.searchTerm = 'daft punk'

    $scope.currentVideo = null

    $scope.setVideo = function( video ) {
        $scope.currentVideo = video
    }

    $scope.searchVideos = function() {
        $scope.loading = true

        YoutubeAPI.searchVideos( $scope.searchTerm ).then( results => {
            $scope.results.remoteVideos = $scope.results.results = results
        }, () => {
            $scope.results.remoteVideos = $scope.results.results = false
        }).finally(() => {
            $scope.loading = false
        })
    }

    /**
     * Watch the search term changes (search bar)
     * If it's empty reset the results, else go and search the videos
     */
    $scope.$watch('searchTerm', function( newVal, oldVal ) {
        if ( typeof newVal === 'undefined' )
            return

        if ( !newVal ) {
            $scope.results.remoteVideos = $scope.results.results = []
            return
        }

        $scope.searchVideos()
    })

    // To check if item is saved in the wishlist
    $scope.isSaved = function( item ) {
        return $localStorageWishList.hasItem( item )
    }

    // Wait till document is ready to remove loader
    angular.element( document ).ready(() => $scope.ready = true)
    $scope.$watch('ready', ( newValue, oldValue ) => angular.element( document.getElementById('main') ).removeClass('loading'))
}])
/**
 * This controller has very small responsibility
 * When changing the tabs it changes the list name and add watcher to it
 */

app.controller('MenuController', ['$scope', '$localStorageWishList', ( $scope, $localStorageWishList ) => {
    $scope.setList = ( list ) => ($scope.results.list = list)

    /**
     * So when the list changes we put in the results the items from the wishlist
     */
    $scope.$watch('results.list', function( newVal, oldVal ) {
        if ( newVal === 'remote' ) {
            $scope.results.results = $scope.results.remoteVideos
        } else {
            $scope.results.results = $scope.results.wishlist = $localStorageWishList.getList()
        }
    })
}])
/**
 * Directive for playing the sounds
 */

app.directive('result', [function() {
    return {
        restrict: 'C',
        link: function( scope, element ) {
            element.on('mouseenter', function( e ) {
                let audio = document.getElementsByTagName("audio")[0]
                audio.play()
            })
        }
    }
}])
/**
 * This directive is for the 'heart' icon, to add item to the wishlist
 */

app.directive('wishlist', ['$localStorageWishList', ( $localStorageWishList ) => {
    return {
        restrict: 'C',
        link: function( scope, element, attrs ) {
            element.on('click', e => {
                let video = angular.fromJson( attrs.item )

                if ( $localStorageWishList.hasItem( video.code ) ) {
                    $localStorageWishList.removeItem( video )
                    if ( scope.results.list == 'wishlist' ) {
                        $( element.closest('.result') ).fadeOut('fast')
                    } else {
                        element.removeClass('fa-heart').addClass('fa-heart-o')
                    }
                } else {
                    $localStorageWishList.addItem( video )
                    element.removeClass('fa-heart-o').addClass('fa-heart')
                }
            })
        }
    }
}])
app.factory('YoutubeAPI', ['$http', '$q', function( $http, $q ) {
    let nextPageToken = ''
    let currentQuery = ''
    let videos = []

    /**
     * Reset the current query and the next page token
     * @param term
     */
    function setQuery ( term ) {
        nextPageToken = ''
        currentQuery =  term
        videos = []
    }

    function arrangeVideos( results ) {
        // If nothing is found
        if ( !results.data.items.length )
            return false

        results.data.items.forEach((video, index) => {
            videos.push({
                code: video.id.videoId,
                title: video.snippet.title,
                description: video.snippet.description
            })
        })

        return videos
    }

    return {
        /**
         * Search for youtube video
         * @param term
         * @returns {Promise}
         */
        searchVideos: function( term ) {
            /*
             * If the term parameter is different from the current query,
             * reset the current query and next page token
             */
            if ( currentQuery !== term )
                setQuery( term )

            let deferred = $q.defer()
            $http.get('https://www.googleapis.com/youtube/v3/search', {
                params: {
                    key: 'AIzaSyAaVxe2e6AbU3FD2pKTQh1_AySRHC1NY8I',
                    type: 'video',
                    maxResults: '10',
                    pageToken: nextPageToken,
                    part: 'id,snippet',
                    fields: 'items/id,items/snippet/title,items/snippet/description,items/snippet/thumbnails/default,items/snippet/channelTitle,nextPageToken',
                    q: currentQuery,
                }
            }).then(response => {
                let results = arrangeVideos( response )

                if ( results !== false ) {
                    nextPageToken = response.data.nextPageToken
                    deferred.resolve( results )
                } else
                    deferred.reject( false )
            })

            return deferred.promise
        }
    }
}])
app.directive('player', ['$youtube',  function ( $youtube ) {
    return {
        restrict: 'A',
        scope: {
            videoId: '@'
        },
        link: function( scope ) {
            scope.$watch('videoId', function( videoId ) {
                if ( videoId )
                    $youtube.createPlayer( videoId )
            })
        }
    }
}])
app.service('$youtube', ['$log', function( $log ) {
    let player = false
    let videoId = false;

    return {
        initPlayer: function() {
            if ( player ) {
                player.loadVideoById( videoId )
                return
            }

            player = new YT.Player('player', {
                videoId: videoId,
                playerVars: {
                    'color': 'white',
                    'autoplay': 1,
                    'controls': 2,
                    'showinfo': 0,
                    'fs': 0,
                    'rel' : 0
                }
            })
        },

        createPlayer: function( id ) {
            let self = this

            videoId = id

            // If the library isn't here at all,
            if ( typeof YT === 'undefined' ) {
                // ...grab on to global callback, in case it's eventually loaded
                $window.onYouTubeIframeAPIReady = self.initPlayer;
                $log('Unable to find YouTube iframe library on this page.')
            } else {
                YT.ready( self.initPlayer )
            }

        }
    }
}])

